{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Desktop\\\\Projects\\\\simplevent\\\\front_end\\\\front_end\\\\node_modules\\\\react-native-swipeable-flat-list\\\\src\\\\components\\\\SwipeableListItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nvar SWIPE = {\n  ACTION: {\n    CLOSELEFT: -2,\n    CLOSERIGHT: 2,\n    OPENLEFT: 1,\n    OPENRIGHT: -1\n  },\n  DIRECTION: {\n    LEFT: -1,\n    RIGHT: 1\n  },\n  STATE: {\n    CLOSED: 0,\n    LEFTOPEN: -1,\n    RIGHTOPEN: 1\n  }\n};\n\nvar SwipeableListItem = function (_Component) {\n  _inherits(SwipeableListItem, _Component);\n\n  var _super = _createSuper(SwipeableListItem);\n\n  function SwipeableListItem(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeableListItem);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      swipeValueLeft: new Animated.Value(0),\n      swipeValueRight: new Animated.Value(0),\n      swipeState: SWIPE.STATE.CLOSED,\n      swipeDirection: null,\n      swipeInitialValue: null\n    };\n\n    _this.handleMoveShouldSetPanResponder = function (event, gestureState) {\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n      var swipeThreshold = _this.props.swipeThreshold;\n\n      if (Math.abs(dy) > Math.abs(dx)) {\n        return false;\n      }\n\n      if (Math.abs(dx) < swipeThreshold) {\n        return false;\n      }\n\n      var swipeDirection = Math.sign(dx);\n\n      _this.setState({\n        swipeDirection: swipeDirection\n      });\n\n      return true;\n    };\n\n    _this.handlePanResponderGrant = function (event, gestureState) {};\n\n    _this.handlePanResponderMove = function (event, gestureState) {\n      var dx = gestureState.dx;\n      var _this$props = _this.props,\n          left = _this$props.left,\n          right = _this$props.right;\n      var _this$state = _this.state,\n          swipeValueLeft = _this$state.swipeValueLeft,\n          swipeValueRight = _this$state.swipeValueRight,\n          swipeDirection = _this$state.swipeDirection,\n          swipeState = _this$state.swipeState;\n      var swipeAction = swipeDirection + swipeState;\n      var swipeInitialValue;\n      var swipeValue;\n      var maxDx = 0;\n      var newDx;\n\n      switch (swipeAction) {\n        case SWIPE.ACTION.CLOSELEFT:\n          swipeInitialValue = _this.state.swipeInitialValue || swipeValueLeft._value;\n          swipeValue = swipeValueLeft;\n\n          if (left) {\n            maxDx = left.props.style.width;\n          }\n\n          newDx = swipeInitialValue + dx;\n          break;\n\n        case SWIPE.ACTION.CLOSERIGHT:\n          swipeInitialValue = _this.state.swipeInitialValue || swipeValueRight._value;\n          swipeValue = swipeValueRight;\n\n          if (right) {\n            maxDx = right.props.style.width;\n          }\n\n          newDx = swipeInitialValue - dx;\n          break;\n\n        case SWIPE.ACTION.OPENLEFT:\n          swipeInitialValue = _this.state.swipeInitialValue || swipeValueLeft._value;\n          swipeValue = swipeValueLeft;\n\n          if (left) {\n            maxDx = left.props.style.width;\n          }\n\n          newDx = swipeInitialValue + dx;\n          break;\n\n        case SWIPE.ACTION.OPENRIGHT:\n          swipeInitialValue = _this.state.swipeInitialValue || swipeValueRight._value;\n          swipeValue = swipeValueRight;\n\n          if (right) {\n            maxDx = right.props.style.width;\n          }\n\n          newDx = swipeInitialValue - dx;\n          break;\n\n        default:\n          return;\n      }\n\n      if (newDx < 0) {\n        newDx = 0;\n      }\n\n      if (newDx > maxDx) {\n        newDx = maxDx;\n      }\n\n      swipeValue.setValue(newDx);\n\n      _this.setState({\n        swipeInitialValue: swipeInitialValue\n      });\n    };\n\n    _this.handlePanResponderEnd = function (event, gestureState) {\n      var dx = gestureState.dx;\n      var absDx = Math.abs(dx);\n      var _this$props2 = _this.props,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          swipeOpenThresholdPercentage = _this$props2.swipeOpenThresholdPercentage,\n          swipeCloseThresholdPercentage = _this$props2.swipeCloseThresholdPercentage;\n      var leftWidth = left && left.props.style.width;\n      var rightWidth = right && right.props.style.width;\n      var _this$state2 = _this.state,\n          swipeValueLeft = _this$state2.swipeValueLeft,\n          swipeValueRight = _this$state2.swipeValueRight,\n          swipeDirection = _this$state2.swipeDirection,\n          swipeState = _this$state2.swipeState;\n      var swipeAction = swipeDirection + swipeState;\n      var swipeOpenThreshold;\n      var swipeCloseThreshold;\n\n      switch (swipeAction) {\n        case SWIPE.ACTION.CLOSELEFT:\n          swipeCloseThreshold = swipeCloseThresholdPercentage / 100 * leftWidth;\n\n          if (swipeCloseThreshold && absDx > swipeCloseThreshold) {\n            _this.closeLeft();\n          } else {\n            _this.openLeft();\n          }\n\n          break;\n\n        case SWIPE.ACTION.CLOSERIGHT:\n          swipeCloseThreshold = swipeCloseThresholdPercentage / 100 * rightWidth;\n\n          if (swipeCloseThreshold && absDx > swipeCloseThreshold) {\n            _this.closeRight();\n          } else {\n            _this.openRight();\n          }\n\n          break;\n\n        case SWIPE.ACTION.OPENLEFT:\n          swipeOpenThreshold = swipeOpenThresholdPercentage / 100 * leftWidth;\n\n          if (swipeOpenThreshold && absDx > swipeOpenThreshold) {\n            _this.openLeft();\n          } else {\n            _this.closeLeft();\n          }\n\n          break;\n\n        case SWIPE.ACTION.OPENRIGHT:\n          swipeOpenThreshold = swipeOpenThresholdPercentage / 100 * rightWidth;\n\n          if (swipeOpenThreshold && absDx > swipeOpenThreshold) {\n            _this.openRight();\n          } else {\n            _this.closeRight();\n          }\n\n          break;\n      }\n    };\n\n    _this.open = function (swipeValue, toValue, swipeState) {\n      var _this$props3 = _this.props,\n          friction = _this$props3.friction,\n          tension = _this$props3.tension,\n          onOpen = _this$props3.onOpen;\n      onOpen && onOpen(_assertThisInitialized(_this));\n      Animated.spring(swipeValue, {\n        toValue: toValue,\n        friction: friction,\n        tension: tension\n      }).start();\n\n      _this.setState({\n        swipeState: swipeState,\n        swipeInitialValue: null\n      });\n    };\n\n    _this.openLeft = function () {\n      var toValue = 0;\n      var left = _this.props.left;\n      var swipeValueLeft = _this.state.swipeValueLeft;\n\n      if (left) {\n        toValue = left.props.style.width;\n      }\n\n      _this.open(swipeValueLeft, toValue, SWIPE.STATE.LEFTOPEN);\n    };\n\n    _this.openRight = function () {\n      var toValue = 0;\n      var right = _this.props.right;\n      var swipeValueRight = _this.state.swipeValueRight;\n\n      if (right) {\n        toValue = right.props.style.width;\n      }\n\n      _this.open(swipeValueRight, toValue, SWIPE.STATE.RIGHTOPEN);\n    };\n\n    _this.close = function (swipeValue) {\n      var _this$props4 = _this.props,\n          friction = _this$props4.friction,\n          tension = _this$props4.tension,\n          onClose = _this$props4.onClose;\n      var _this$state3 = _this.state,\n          swipeValueLeft = _this$state3.swipeValueLeft,\n          swipeValueRight = _this$state3.swipeValueRight,\n          swipeState = _this$state3.swipeState;\n\n      if (!swipeValue) {\n        if (swipeState === SWIPE.STATE.LEFTOPEN) {\n          swipeValue = swipeValueLeft;\n        } else if (swipeState === SWIPE.STATE.RIGHTOPEN) {\n          swipeValue = swipeValueRight;\n        }\n      }\n\n      onClose && onClose();\n      Animated.spring(swipeValue, {\n        toValue: 0,\n        friction: friction,\n        tension: tension\n      }).start();\n\n      _this.setState({\n        swipeState: SWIPE.STATE.CLOSED,\n        swipeInitialValue: null\n      });\n    };\n\n    _this.closeLeft = function () {\n      var swipeValueLeft = _this.state.swipeValueLeft;\n\n      _this.close(swipeValueLeft);\n    };\n\n    _this.closeRight = function () {\n      var swipeValueRight = _this.state.swipeValueRight;\n\n      _this.close(swipeValueRight);\n    };\n\n    _this.render = function () {\n      var _this$props5 = _this.props,\n          item = _this$props5.item,\n          left = _this$props5.left,\n          right = _this$props5.right,\n          backgroundColor = _this$props5.backgroundColor;\n      var _this$state4 = _this.state,\n          swipeValueLeft = _this$state4.swipeValueLeft,\n          swipeValueRight = _this$state4.swipeValueRight,\n          swipeDirection = _this$state4.swipeDirection,\n          swipeState = _this$state4.swipeState;\n      var swipeAction = swipeDirection + swipeState;\n      var height = item.props.style.height;\n      return React.createElement(View, {\n        style: {\n          backgroundColor: backgroundColor,\n          height: height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 4\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 5\n        }\n      }, left, React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 6\n        }\n      }), right), React.createElement(Animated.View, _extends({}, _this._panResponder.panHandlers, {\n        style: {\n          position: 'absolute',\n          left: swipeValueLeft,\n          right: swipeValueRight,\n          backgroundColor: backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 5\n        }\n      }), item));\n    };\n\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gestureState) {\n        return _this.handleMoveShouldSetPanResponder(event, gestureState);\n      },\n      onPanResponderGrant: function onPanResponderGrant(event, gestureState) {\n        return _this.handlePanResponderGrant(event, gestureState);\n      },\n      onPanResponderMove: function onPanResponderMove(event, gestureState) {\n        return _this.handlePanResponderMove(event, gestureState);\n      },\n      onPanResponderEnd: function onPanResponderEnd(event, gestureState) {\n        return _this.handlePanResponderEnd(event, gestureState);\n      }\n    });\n    return _this;\n  }\n\n  return SwipeableListItem;\n}(Component);\n\nSwipeableListItem.propTypes = {\n  item: PropTypes.element.isRequired,\n  left: PropTypes.element,\n  right: PropTypes.element,\n  backgroundColor: PropTypes.string,\n  swipeThreshold: PropTypes.number,\n  swipeOpenThresholdPercentage: PropTypes.number,\n  swipeCloseThresholdPercentage: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func\n};\nSwipeableListItem.defaultProps = {\n  backgroundColor: '#fff',\n  swipeThreshold: 4,\n  swipeOpenThresholdPercentage: 20,\n  swipeCloseThresholdPercentage: 20,\n  friction: 9,\n  tension: 40\n};\nexport { SwipeableListItem as default };","map":{"version":3,"sources":["C:/Users/Lucas/Desktop/Projects/simplevent/front_end/front_end/node_modules/react-native-swipeable-flat-list/src/components/SwipeableListItem.js"],"names":["React","Component","PropTypes","SWIPE","ACTION","CLOSELEFT","CLOSERIGHT","OPENLEFT","OPENRIGHT","DIRECTION","LEFT","RIGHT","STATE","CLOSED","LEFTOPEN","RIGHTOPEN","SwipeableListItem","props","state","swipeValueLeft","Animated","Value","swipeValueRight","swipeState","swipeDirection","swipeInitialValue","handleMoveShouldSetPanResponder","event","gestureState","dx","dy","swipeThreshold","Math","abs","sign","setState","handlePanResponderGrant","handlePanResponderMove","left","right","swipeAction","swipeValue","maxDx","newDx","_value","style","width","setValue","handlePanResponderEnd","absDx","swipeOpenThresholdPercentage","swipeCloseThresholdPercentage","leftWidth","rightWidth","swipeOpenThreshold","swipeCloseThreshold","closeLeft","openLeft","closeRight","openRight","open","toValue","friction","tension","onOpen","spring","start","close","onClose","render","item","backgroundColor","height","flexDirection","flex","_panResponder","panHandlers","position","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderEnd","propTypes","element","isRequired","string","number","func","defaultProps"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAQA,IAAMC,KAAK,GAAG;AACbC,EAAAA,MAAM,EAAE;AACPC,IAAAA,SAAS,EAAE,CAAC,CADL;AAEPC,IAAAA,UAAU,EAAE,CAFL;AAGPC,IAAAA,QAAQ,EAAE,CAHH;AAIPC,IAAAA,SAAS,EAAE,CAAC;AAJL,GADK;AAObC,EAAAA,SAAS,EAAE;AACVC,IAAAA,IAAI,EAAE,CAAC,CADG;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAPE;AAWbC,EAAAA,KAAK,EAAE;AACNC,IAAAA,MAAM,EAAE,CADF;AAENC,IAAAA,QAAQ,EAAE,CAAC,CAFL;AAGNC,IAAAA,SAAS,EAAE;AAHL;AAXM,CAAd;;IAmBqBC,iB;;;;;AAgCpB,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;AADkB,UARnBC,KAQmB,GARX;AACPC,MAAAA,cAAc,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CADT;AAEPC,MAAAA,eAAe,EAAE,IAAIF,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAFV;AAGPE,MAAAA,UAAU,EAAEpB,KAAK,CAACS,KAAN,CAAYC,MAHjB;AAIPW,MAAAA,cAAc,EAAE,IAJT;AAKPC,MAAAA,iBAAiB,EAAE;AALZ,KAQW;;AAAA,UAUnBC,+BAVmB,GAUe,UAACC,KAAD,EAAQC,YAAR,EAAyB;AAAA,UAClDC,EADkD,GACvCD,YADuC,CAClDC,EADkD;AAAA,UAC9CC,EAD8C,GACvCF,YADuC,CAC9CE,EAD8C;AAAA,UAElDC,cAFkD,GAE/B,MAAKd,KAF0B,CAElDc,cAFkD;;AAG1D,UAAIC,IAAI,CAACC,GAAL,CAASH,EAAT,IAAeE,IAAI,CAACC,GAAL,CAASJ,EAAT,CAAnB,EAAiC;AAChC,eAAO,KAAP;AACA;;AACD,UAAIG,IAAI,CAACC,GAAL,CAASJ,EAAT,IAAeE,cAAnB,EAAmC;AAClC,eAAO,KAAP;AACA;;AACD,UAAMP,cAAc,GAAGQ,IAAI,CAACE,IAAL,CAAUL,EAAV,CAAvB;;AACA,YAAKM,QAAL,CAAc;AAAEX,QAAAA,cAAc,EAAdA;AAAF,OAAd;;AACA,aAAO,IAAP;AACA,KAtBkB;;AAAA,UAwBnBY,uBAxBmB,GAwBO,UAACT,KAAD,EAAQC,YAAR,EAAyB,CAAE,CAxBlC;;AAAA,UA0BnBS,sBA1BmB,GA0BM,UAACV,KAAD,EAAQC,YAAR,EAAyB;AAAA,UACzCC,EADyC,GAClCD,YADkC,CACzCC,EADyC;AAAA,wBAK7C,MAAKZ,KALwC;AAAA,UAGhDqB,IAHgD,eAGhDA,IAHgD;AAAA,UAIhDC,KAJgD,eAIhDA,KAJgD;AAAA,wBAW7C,MAAKrB,KAXwC;AAAA,UAOhDC,cAPgD,eAOhDA,cAPgD;AAAA,UAQhDG,eARgD,eAQhDA,eARgD;AAAA,UAShDE,cATgD,eAShDA,cATgD;AAAA,UAUhDD,UAVgD,eAUhDA,UAVgD;AAYjD,UAAMiB,WAAW,GAAGhB,cAAc,GAAGD,UAArC;AACA,UAAIE,iBAAJ;AACA,UAAIgB,UAAJ;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAJ;;AACA,cAAQH,WAAR;AACC,aAAKrC,KAAK,CAACC,MAAN,CAAaC,SAAlB;AACCoB,UAAAA,iBAAiB,GAAG,MAAKP,KAAL,CAAWO,iBAAX,IAAgCN,cAAc,CAACyB,MAAnE;AACAH,UAAAA,UAAU,GAAGtB,cAAb;;AACA,cAAImB,IAAJ,EAAU;AACTI,YAAAA,KAAK,GAAGJ,IAAI,CAACrB,KAAL,CAAW4B,KAAX,CAAiBC,KAAzB;AACA;;AACDH,UAAAA,KAAK,GAAGlB,iBAAiB,GAAGI,EAA5B;AACA;;AACD,aAAK1B,KAAK,CAACC,MAAN,CAAaE,UAAlB;AACCmB,UAAAA,iBAAiB,GAAG,MAAKP,KAAL,CAAWO,iBAAX,IAAgCH,eAAe,CAACsB,MAApE;AACAH,UAAAA,UAAU,GAAGnB,eAAb;;AACA,cAAIiB,KAAJ,EAAW;AACVG,YAAAA,KAAK,GAAGH,KAAK,CAACtB,KAAN,CAAY4B,KAAZ,CAAkBC,KAA1B;AACA;;AACDH,UAAAA,KAAK,GAAGlB,iBAAiB,GAAGI,EAA5B;AACA;;AACD,aAAK1B,KAAK,CAACC,MAAN,CAAaG,QAAlB;AACCkB,UAAAA,iBAAiB,GAAG,MAAKP,KAAL,CAAWO,iBAAX,IAAgCN,cAAc,CAACyB,MAAnE;AACAH,UAAAA,UAAU,GAAGtB,cAAb;;AACA,cAAImB,IAAJ,EAAU;AACTI,YAAAA,KAAK,GAAGJ,IAAI,CAACrB,KAAL,CAAW4B,KAAX,CAAiBC,KAAzB;AACA;;AACDH,UAAAA,KAAK,GAAGlB,iBAAiB,GAAGI,EAA5B;AACA;;AACD,aAAK1B,KAAK,CAACC,MAAN,CAAaI,SAAlB;AACCiB,UAAAA,iBAAiB,GAAG,MAAKP,KAAL,CAAWO,iBAAX,IAAgCH,eAAe,CAACsB,MAApE;AACAH,UAAAA,UAAU,GAAGnB,eAAb;;AACA,cAAIiB,KAAJ,EAAW;AACVG,YAAAA,KAAK,GAAGH,KAAK,CAACtB,KAAN,CAAY4B,KAAZ,CAAkBC,KAA1B;AACA;;AACDH,UAAAA,KAAK,GAAGlB,iBAAiB,GAAGI,EAA5B;AACA;;AACD;AACC;AAlCF;;AAoCA,UAAIc,KAAK,GAAG,CAAZ,EAAe;AACdA,QAAAA,KAAK,GAAG,CAAR;AACA;;AACD,UAAIA,KAAK,GAAGD,KAAZ,EAAmB;AAClBC,QAAAA,KAAK,GAAGD,KAAR;AACA;;AACDD,MAAAA,UAAU,CAACM,QAAX,CAAoBJ,KAApB;;AACA,YAAKR,QAAL,CAAc;AAAEV,QAAAA,iBAAiB,EAAjBA;AAAF,OAAd;AACA,KAvFkB;;AAAA,UAyFnBuB,qBAzFmB,GAyFK,UAACrB,KAAD,EAAQC,YAAR,EAAyB;AAAA,UACxCC,EADwC,GACjCD,YADiC,CACxCC,EADwC;AAEhD,UAAMoB,KAAK,GAAGjB,IAAI,CAACC,GAAL,CAASJ,EAAT,CAAd;AAFgD,yBAQ5C,MAAKZ,KARuC;AAAA,UAI/CqB,IAJ+C,gBAI/CA,IAJ+C;AAAA,UAK/CC,KAL+C,gBAK/CA,KAL+C;AAAA,UAM/CW,4BAN+C,gBAM/CA,4BAN+C;AAAA,UAO/CC,6BAP+C,gBAO/CA,6BAP+C;AAShD,UAAMC,SAAS,GAAGd,IAAI,IAAIA,IAAI,CAACrB,KAAL,CAAW4B,KAAX,CAAiBC,KAA3C;AACA,UAAMO,UAAU,GAAGd,KAAK,IAAIA,KAAK,CAACtB,KAAN,CAAY4B,KAAZ,CAAkBC,KAA9C;AAVgD,yBAgB5C,MAAK5B,KAhBuC;AAAA,UAY/CC,cAZ+C,gBAY/CA,cAZ+C;AAAA,UAa/CG,eAb+C,gBAa/CA,eAb+C;AAAA,UAc/CE,cAd+C,gBAc/CA,cAd+C;AAAA,UAe/CD,UAf+C,gBAe/CA,UAf+C;AAiBhD,UAAMiB,WAAW,GAAGhB,cAAc,GAAGD,UAArC;AACA,UAAI+B,kBAAJ;AACA,UAAIC,mBAAJ;;AACA,cAAQf,WAAR;AACC,aAAKrC,KAAK,CAACC,MAAN,CAAaC,SAAlB;AACCkD,UAAAA,mBAAmB,GAAIJ,6BAA6B,GAAG,GAAjC,GAAwCC,SAA9D;;AACA,cAAIG,mBAAmB,IAAIN,KAAK,GAAGM,mBAAnC,EAAwD;AACvD,kBAAKC,SAAL;AACA,WAFD,MAEO;AACN,kBAAKC,QAAL;AACA;;AACD;;AACD,aAAKtD,KAAK,CAACC,MAAN,CAAaE,UAAlB;AACCiD,UAAAA,mBAAmB,GAAIJ,6BAA6B,GAAG,GAAjC,GAAwCE,UAA9D;;AACA,cAAIE,mBAAmB,IAAIN,KAAK,GAAGM,mBAAnC,EAAwD;AACvD,kBAAKG,UAAL;AACA,WAFD,MAEO;AACN,kBAAKC,SAAL;AACA;;AACD;;AACD,aAAKxD,KAAK,CAACC,MAAN,CAAaG,QAAlB;AACC+C,UAAAA,kBAAkB,GAAIJ,4BAA4B,GAAG,GAAhC,GAAuCE,SAA5D;;AACA,cAAIE,kBAAkB,IAAIL,KAAK,GAAGK,kBAAlC,EAAsD;AACrD,kBAAKG,QAAL;AACA,WAFD,MAEO;AACN,kBAAKD,SAAL;AACA;;AACD;;AACD,aAAKrD,KAAK,CAACC,MAAN,CAAaI,SAAlB;AACC8C,UAAAA,kBAAkB,GAAIJ,4BAA4B,GAAG,GAAhC,GAAuCG,UAA5D;;AACA,cAAIC,kBAAkB,IAAIL,KAAK,GAAGK,kBAAlC,EAAsD;AACrD,kBAAKK,SAAL;AACA,WAFD,MAEO;AACN,kBAAKD,UAAL;AACA;;AACD;AAhCF;AAkCA,KA/IkB;;AAAA,UAiJnBE,IAjJmB,GAiJZ,UAACnB,UAAD,EAAaoB,OAAb,EAAsBtC,UAAtB,EAAqC;AAAA,yBAKvC,MAAKN,KALkC;AAAA,UAE1C6C,QAF0C,gBAE1CA,QAF0C;AAAA,UAG1CC,OAH0C,gBAG1CA,OAH0C;AAAA,UAI1CC,MAJ0C,gBAI1CA,MAJ0C;AAM3CA,MAAAA,MAAM,IAAIA,MAAM,+BAAhB;AACA5C,MAAAA,QAAQ,CAAC6C,MAAT,CACCxB,UADD,EAEC;AACCoB,QAAAA,OAAO,EAAPA,OADD;AAECC,QAAAA,QAAQ,EAARA,QAFD;AAGCC,QAAAA,OAAO,EAAPA;AAHD,OAFD,EAOEG,KAPF;;AAQA,YAAK/B,QAAL,CAAc;AACbZ,QAAAA,UAAU,EAAVA,UADa;AAEbE,QAAAA,iBAAiB,EAAE;AAFN,OAAd;AAIA,KApKkB;;AAAA,UAsKnBgC,QAtKmB,GAsKR,YAAM;AAChB,UAAII,OAAO,GAAG,CAAd;AADgB,UAERvB,IAFQ,GAEC,MAAKrB,KAFN,CAERqB,IAFQ;AAAA,UAGRnB,cAHQ,GAGW,MAAKD,KAHhB,CAGRC,cAHQ;;AAIhB,UAAImB,IAAJ,EAAU;AACTuB,QAAAA,OAAO,GAAGvB,IAAI,CAACrB,KAAL,CAAW4B,KAAX,CAAiBC,KAA3B;AACA;;AACD,YAAKc,IAAL,CAAUzC,cAAV,EAA0B0C,OAA1B,EAAmC1D,KAAK,CAACS,KAAN,CAAYE,QAA/C;AACA,KA9KkB;;AAAA,UAgLnB6C,SAhLmB,GAgLP,YAAM;AACjB,UAAIE,OAAO,GAAG,CAAd;AADiB,UAETtB,KAFS,GAEC,MAAKtB,KAFN,CAETsB,KAFS;AAAA,UAGTjB,eAHS,GAGW,MAAKJ,KAHhB,CAGTI,eAHS;;AAIjB,UAAIiB,KAAJ,EAAW;AACVsB,QAAAA,OAAO,GAAGtB,KAAK,CAACtB,KAAN,CAAY4B,KAAZ,CAAkBC,KAA5B;AACA;;AACD,YAAKc,IAAL,CAAUtC,eAAV,EAA2BuC,OAA3B,EAAoC1D,KAAK,CAACS,KAAN,CAAYG,SAAhD;AACA,KAxLkB;;AAAA,UA0LnBoD,KA1LmB,GA0LX,UAAC1B,UAAD,EAAgB;AAAA,yBAKnB,MAAKxB,KALc;AAAA,UAEtB6C,QAFsB,gBAEtBA,QAFsB;AAAA,UAGtBC,OAHsB,gBAGtBA,OAHsB;AAAA,UAItBK,OAJsB,gBAItBA,OAJsB;AAAA,yBAUnB,MAAKlD,KAVc;AAAA,UAOtBC,cAPsB,gBAOtBA,cAPsB;AAAA,UAQtBG,eARsB,gBAQtBA,eARsB;AAAA,UAStBC,UATsB,gBAStBA,UATsB;;AAWvB,UAAI,CAACkB,UAAL,EAAiB;AAChB,YAAIlB,UAAU,KAAKpB,KAAK,CAACS,KAAN,CAAYE,QAA/B,EAAyC;AACxC2B,UAAAA,UAAU,GAAGtB,cAAb;AACA,SAFD,MAEO,IAAII,UAAU,KAAKpB,KAAK,CAACS,KAAN,CAAYG,SAA/B,EAA0C;AAChD0B,UAAAA,UAAU,GAAGnB,eAAb;AACA;AACD;;AACD8C,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AACAhD,MAAAA,QAAQ,CAAC6C,MAAT,CACCxB,UADD,EAEC;AACCoB,QAAAA,OAAO,EAAE,CADV;AAECC,QAAAA,QAAQ,EAARA,QAFD;AAGCC,QAAAA,OAAO,EAAPA;AAHD,OAFD,EAOEG,KAPF;;AAQA,YAAK/B,QAAL,CAAc;AACbZ,QAAAA,UAAU,EAAEpB,KAAK,CAACS,KAAN,CAAYC,MADX;AAEbY,QAAAA,iBAAiB,EAAE;AAFN,OAAd;AAIA,KAzNkB;;AAAA,UA2NnB+B,SA3NmB,GA2NP,YAAM;AAAA,UACTrC,cADS,GACU,MAAKD,KADf,CACTC,cADS;;AAEjB,YAAKgD,KAAL,CAAWhD,cAAX;AACA,KA9NkB;;AAAA,UAgOnBuC,UAhOmB,GAgON,YAAM;AAAA,UACVpC,eADU,GACU,MAAKJ,KADf,CACVI,eADU;;AAElB,YAAK6C,KAAL,CAAW7C,eAAX;AACA,KAnOkB;;AAAA,UAqOnB+C,MArOmB,GAqOV,YAAM;AAAA,yBAMV,MAAKpD,KANK;AAAA,UAEbqD,IAFa,gBAEbA,IAFa;AAAA,UAGbhC,IAHa,gBAGbA,IAHa;AAAA,UAIbC,KAJa,gBAIbA,KAJa;AAAA,UAKbgC,eALa,gBAKbA,eALa;AAAA,yBAYV,MAAKrD,KAZK;AAAA,UAQbC,cARa,gBAQbA,cARa;AAAA,UASbG,eATa,gBASbA,eATa;AAAA,UAUbE,cAVa,gBAUbA,cAVa;AAAA,UAWbD,UAXa,gBAWbA,UAXa;AAad,UAAMiB,WAAW,GAAGhB,cAAc,GAAGD,UAArC;AAbc,UAcNiD,MAdM,GAcKF,IAAI,CAACrD,KAAL,CAAW4B,KAdhB,CAcN2B,MAdM;AAed,aACC,oBAAC,IAAD;AACC,QAAA,KAAK,EAAE;AACND,UAAAA,eAAe,EAAfA,eADM;AAENC,UAAAA,MAAM,EAANA;AAFM,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMC,oBAAC,IAAD;AACC,QAAA,KAAK,EAAE;AACNC,UAAAA,aAAa,EAAE;AADT,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKEnC,IALF,EAMC,oBAAC,IAAD;AACC,QAAA,KAAK,EAAE;AACNoC,UAAAA,IAAI,EAAE,CADA;AAENH,UAAAA,eAAe,EAAfA;AAFM,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAND,EAYEhC,KAZF,CAND,EAoBC,oBAAC,QAAD,CAAU,IAAV,eACK,MAAKoC,aAAL,CAAmBC,WADxB;AAEC,QAAA,KAAK,EAAE;AACNC,UAAAA,QAAQ,EAAE,UADJ;AAENvC,UAAAA,IAAI,EAAEnB,cAFA;AAGNoB,UAAAA,KAAK,EAAEjB,eAHD;AAINiD,UAAAA,eAAe,EAAfA;AAJM,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASED,IATF,CApBD,CADD;AAkCA,KAtRkB;;AAElB,UAAKK,aAAL,GAAqBG,YAAY,CAACC,MAAb,CAAoB;AACxCC,MAAAA,2BAA2B,EAAE,qCAACrD,KAAD,EAAQC,YAAR;AAAA,eAAyB,MAAKF,+BAAL,CAAqCC,KAArC,EAA4CC,YAA5C,CAAzB;AAAA,OADW;AAExCqD,MAAAA,mBAAmB,EAAE,6BAACtD,KAAD,EAAQC,YAAR;AAAA,eAAyB,MAAKQ,uBAAL,CAA6BT,KAA7B,EAAoCC,YAApC,CAAzB;AAAA,OAFmB;AAGxCsD,MAAAA,kBAAkB,EAAE,4BAACvD,KAAD,EAAQC,YAAR;AAAA,eAAyB,MAAKS,sBAAL,CAA4BV,KAA5B,EAAmCC,YAAnC,CAAzB;AAAA,OAHoB;AAIxCuD,MAAAA,iBAAiB,EAAE,2BAACxD,KAAD,EAAQC,YAAR;AAAA,eAAyB,MAAKoB,qBAAL,CAA2BrB,KAA3B,EAAkCC,YAAlC,CAAzB;AAAA;AAJqB,KAApB,CAArB;AAFkB;AAQlB;;;EAxC6C3B,S;;AAA1Be,iB,CACboE,S,GAAY;AAClBd,EAAAA,IAAI,EAAEpE,SAAS,CAACmF,OAAV,CAAkBC,UADN;AAElBhD,EAAAA,IAAI,EAAEpC,SAAS,CAACmF,OAFE;AAGlB9C,EAAAA,KAAK,EAAErC,SAAS,CAACmF,OAHC;AAIlBd,EAAAA,eAAe,EAAErE,SAAS,CAACqF,MAJT;AAKlBxD,EAAAA,cAAc,EAAE7B,SAAS,CAACsF,MALR;AAMlBtC,EAAAA,4BAA4B,EAAEhD,SAAS,CAACsF,MANtB;AAOlBrC,EAAAA,6BAA6B,EAAEjD,SAAS,CAACsF,MAPvB;AAQlB1B,EAAAA,QAAQ,EAAE5D,SAAS,CAACsF,MARF;AASlBzB,EAAAA,OAAO,EAAE7D,SAAS,CAACsF,MATD;AAUlBxB,EAAAA,MAAM,EAAE9D,SAAS,CAACuF,IAVA;AAWlBrB,EAAAA,OAAO,EAAElE,SAAS,CAACuF;AAXD,C;AADCzE,iB,CAeb0E,Y,GAAe;AACrBnB,EAAAA,eAAe,EAAE,MADI;AAErBxC,EAAAA,cAAc,EAAE,CAFK;AAGrBmB,EAAAA,4BAA4B,EAAE,EAHT;AAIrBC,EAAAA,6BAA6B,EAAE,EAJV;AAKrBW,EAAAA,QAAQ,EAAE,CALW;AAMrBC,EAAAA,OAAO,EAAE;AANY,C;SAfF/C,iB","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n\tAnimated,\n\tPanResponder,\n\tView,\n} from 'react-native';\n\n\nconst SWIPE = {\n\tACTION: {\n\t\tCLOSELEFT: -2,\n\t\tCLOSERIGHT: 2,\n\t\tOPENLEFT: 1,\n\t\tOPENRIGHT: -1,\n\t},\n\tDIRECTION: {\n\t\tLEFT: -1,\n\t\tRIGHT: 1,\n\t},\n\tSTATE: {\n\t\tCLOSED: 0,\n\t\tLEFTOPEN: -1,\n\t\tRIGHTOPEN: 1,\n\t},\n};\n\n\nexport default class SwipeableListItem extends Component {\n\tstatic propTypes = {\n\t\titem: PropTypes.element.isRequired,\n\t\tleft: PropTypes.element,\n\t\tright: PropTypes.element,\n\t\tbackgroundColor: PropTypes.string,\n\t\tswipeThreshold: PropTypes.number,\n\t\tswipeOpenThresholdPercentage: PropTypes.number,\n\t\tswipeCloseThresholdPercentage: PropTypes.number,\n\t\tfriction: PropTypes.number,\n\t\ttension: PropTypes.number,\n\t\tonOpen: PropTypes.func,\n\t\tonClose: PropTypes.func,\n\t};\n\n\tstatic defaultProps = {\n\t\tbackgroundColor: '#fff',\n\t\tswipeThreshold: 4,\n\t\tswipeOpenThresholdPercentage: 20,\n\t\tswipeCloseThresholdPercentage: 20,\n\t\tfriction: 9,\n\t\ttension: 40,\n\t};\n\n\tstate = {\n\t\tswipeValueLeft: new Animated.Value(0),\n\t\tswipeValueRight: new Animated.Value(0),\n\t\tswipeState: SWIPE.STATE.CLOSED,\n\t\tswipeDirection: null,\n\t\tswipeInitialValue: null,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis._panResponder = PanResponder.create({\n\t\t\tonMoveShouldSetPanResponder: (event, gestureState) => this.handleMoveShouldSetPanResponder(event, gestureState),\n\t\t\tonPanResponderGrant: (event, gestureState) => this.handlePanResponderGrant(event, gestureState),\n\t\t\tonPanResponderMove: (event, gestureState) => this.handlePanResponderMove(event, gestureState),\n\t\t\tonPanResponderEnd: (event, gestureState) => this.handlePanResponderEnd(event, gestureState),\n\t\t});\n\t}\n\n\thandleMoveShouldSetPanResponder = (event, gestureState) => {\n\t\tconst { dx, dy } = gestureState;\n\t\tconst { swipeThreshold } = this.props;\n\t\tif (Math.abs(dy) > Math.abs(dx)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Math.abs(dx) < swipeThreshold) {\n\t\t\treturn false;\n\t\t}\n\t\tconst swipeDirection = Math.sign(dx);\n\t\tthis.setState({ swipeDirection });\n\t\treturn true;\n\t}\n\n\thandlePanResponderGrant = (event, gestureState) => {}\n\n\thandlePanResponderMove = (event, gestureState) => {\n\t\tconst { dx } = gestureState;\n\t\tconst {\n\t\t\tleft,\n\t\t\tright,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tswipeValueLeft,\n\t\t\tswipeValueRight,\n\t\t\tswipeDirection,\n\t\t\tswipeState,\n\t\t} = this.state;\n\t\tconst swipeAction = swipeDirection + swipeState;\n\t\tlet swipeInitialValue;\n\t\tlet swipeValue;\n\t\tlet maxDx = 0;\n\t\tlet newDx;\n\t\tswitch (swipeAction) {\n\t\t\tcase SWIPE.ACTION.CLOSELEFT:\n\t\t\t\tswipeInitialValue = this.state.swipeInitialValue || swipeValueLeft._value;\n\t\t\t\tswipeValue = swipeValueLeft;\n\t\t\t\tif (left) {\n\t\t\t\t\tmaxDx = left.props.style.width;\n\t\t\t\t}\n\t\t\t\tnewDx = swipeInitialValue + dx;\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.CLOSERIGHT:\n\t\t\t\tswipeInitialValue = this.state.swipeInitialValue || swipeValueRight._value;\n\t\t\t\tswipeValue = swipeValueRight;\n\t\t\t\tif (right) {\n\t\t\t\t\tmaxDx = right.props.style.width;\n\t\t\t\t}\n\t\t\t\tnewDx = swipeInitialValue - dx;\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.OPENLEFT:\n\t\t\t\tswipeInitialValue = this.state.swipeInitialValue || swipeValueLeft._value;\n\t\t\t\tswipeValue = swipeValueLeft;\n\t\t\t\tif (left) {\n\t\t\t\t\tmaxDx = left.props.style.width;\n\t\t\t\t}\n\t\t\t\tnewDx = swipeInitialValue + dx;\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.OPENRIGHT:\n\t\t\t\tswipeInitialValue = this.state.swipeInitialValue || swipeValueRight._value;\n\t\t\t\tswipeValue = swipeValueRight;\n\t\t\t\tif (right) {\n\t\t\t\t\tmaxDx = right.props.style.width;\n\t\t\t\t}\n\t\t\t\tnewDx = swipeInitialValue - dx;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t\tif (newDx < 0) {\n\t\t\tnewDx = 0;\n\t\t}\n\t\tif (newDx > maxDx) {\n\t\t\tnewDx = maxDx;\n\t\t}\n\t\tswipeValue.setValue(newDx);\n\t\tthis.setState({ swipeInitialValue });\n\t}\n\n\thandlePanResponderEnd = (event, gestureState) => {\n\t\tconst { dx } = gestureState;\n\t\tconst absDx = Math.abs(dx);\n\t\tconst {\n\t\t\tleft,\n\t\t\tright,\n\t\t\tswipeOpenThresholdPercentage,\n\t\t\tswipeCloseThresholdPercentage,\n\t\t} = this.props;\n\t\tconst leftWidth = left && left.props.style.width;\n\t\tconst rightWidth = right && right.props.style.width;\n\t\tconst {\n\t\t\tswipeValueLeft,\n\t\t\tswipeValueRight,\n\t\t\tswipeDirection,\n\t\t\tswipeState,\n\t\t} = this.state;\n\t\tconst swipeAction = swipeDirection + swipeState;\n\t\tlet swipeOpenThreshold;\n\t\tlet swipeCloseThreshold;\n\t\tswitch (swipeAction) {\n\t\t\tcase SWIPE.ACTION.CLOSELEFT:\n\t\t\t\tswipeCloseThreshold = (swipeCloseThresholdPercentage / 100) * leftWidth;\n\t\t\t\tif (swipeCloseThreshold && absDx > swipeCloseThreshold) {\n\t\t\t\t\tthis.closeLeft();\n\t\t\t\t} else {\n\t\t\t\t\tthis.openLeft();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.CLOSERIGHT:\n\t\t\t\tswipeCloseThreshold = (swipeCloseThresholdPercentage / 100) * rightWidth;\n\t\t\t\tif (swipeCloseThreshold && absDx > swipeCloseThreshold) {\n\t\t\t\t\tthis.closeRight();\n\t\t\t\t} else {\n\t\t\t\t\tthis.openRight();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.OPENLEFT:\n\t\t\t\tswipeOpenThreshold = (swipeOpenThresholdPercentage / 100) * leftWidth;\n\t\t\t\tif (swipeOpenThreshold && absDx > swipeOpenThreshold) {\n\t\t\t\t\tthis.openLeft();\n\t\t\t\t} else {\n\t\t\t\t\tthis.closeLeft();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SWIPE.ACTION.OPENRIGHT:\n\t\t\t\tswipeOpenThreshold = (swipeOpenThresholdPercentage / 100) * rightWidth;\n\t\t\t\tif (swipeOpenThreshold && absDx > swipeOpenThreshold) {\n\t\t\t\t\tthis.openRight();\n\t\t\t\t} else {\n\t\t\t\t\tthis.closeRight();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\topen = (swipeValue, toValue, swipeState) => {\n\t\tconst {\n\t\t\tfriction,\n\t\t\ttension,\n\t\t\tonOpen,\n\t\t} = this.props;\n\t\tonOpen && onOpen(this);\n\t\tAnimated.spring(\n\t\t\tswipeValue,\n\t\t\t{\n\t\t\t\ttoValue,\n\t\t\t\tfriction, // default: 7\n\t\t\t\ttension, // default: 40\n\t\t\t},\n\t\t).start()\n\t\tthis.setState({\n\t\t\tswipeState,\n\t\t\tswipeInitialValue: null,\n\t\t});\n\t}\n\n\topenLeft = () => {\n\t\tlet toValue = 0;\n\t\tconst { left } = this.props;\n\t\tconst { swipeValueLeft } = this.state;\n\t\tif (left) {\n\t\t\ttoValue = left.props.style.width;\n\t\t}\n\t\tthis.open(swipeValueLeft, toValue, SWIPE.STATE.LEFTOPEN);\n\t}\n\n\topenRight = () => {\n\t\tlet toValue = 0;\n\t\tconst { right } = this.props;\n\t\tconst { swipeValueRight } = this.state;\n\t\tif (right) {\n\t\t\ttoValue = right.props.style.width;\n\t\t}\n\t\tthis.open(swipeValueRight, toValue, SWIPE.STATE.RIGHTOPEN);\n\t}\n\n\tclose = (swipeValue) => {\n\t\tconst {\n\t\t\tfriction,\n\t\t\ttension,\n\t\t\tonClose,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tswipeValueLeft,\n\t\t\tswipeValueRight,\n\t\t\tswipeState,\n\t\t} = this.state;\n\t\tif (!swipeValue) {\n\t\t\tif (swipeState === SWIPE.STATE.LEFTOPEN) {\n\t\t\t\tswipeValue = swipeValueLeft;\n\t\t\t} else if (swipeState === SWIPE.STATE.RIGHTOPEN) {\n\t\t\t\tswipeValue = swipeValueRight;\n\t\t\t}\n\t\t}\n\t\tonClose && onClose();\n\t\tAnimated.spring(\n\t\t\tswipeValue,\n\t\t\t{\n\t\t\t\ttoValue: 0,\n\t\t\t\tfriction, // default: 7\n\t\t\t\ttension, // default: 40\n\t\t\t},\n\t\t).start()\n\t\tthis.setState({\n\t\t\tswipeState: SWIPE.STATE.CLOSED,\n\t\t\tswipeInitialValue: null,\n\t\t});\n\t}\n\n\tcloseLeft = () => {\n\t\tconst { swipeValueLeft } = this.state;\n\t\tthis.close(swipeValueLeft);\n\t}\n\n\tcloseRight = () => {\n\t\tconst { swipeValueRight } = this.state;\n\t\tthis.close(swipeValueRight);\n\t}\n\n\trender = () => {\n\t\tconst {\n\t\t\titem,\n\t\t\tleft,\n\t\t\tright,\n\t\t\tbackgroundColor,\n\t\t} = this.props;\n\t\tconst {\n\t\t\tswipeValueLeft,\n\t\t\tswipeValueRight,\n\t\t\tswipeDirection,\n\t\t\tswipeState,\n\t\t} = this.state;\n\t\tconst swipeAction = swipeDirection + swipeState;\n\t\tconst { height } = item.props.style;\n\t\treturn (\n\t\t\t<View\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor,\n\t\t\t\t\theight,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<View\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tflexDirection: 'row',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{left}\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t{right}\n\t\t\t\t</View>\n\t\t\t\t<Animated.View\n\t\t\t\t\t{...this._panResponder.panHandlers}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: swipeValueLeft,\n\t\t\t\t\t\tright: swipeValueRight,\n\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{item}\n\t\t\t\t</Animated.View>\n\t\t\t</View>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}